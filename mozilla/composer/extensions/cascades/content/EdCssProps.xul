<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is CaScadeS, a stylesheet editor for Composer.
   -
   - The Initial Developer of the Original Code is
   - Daniel Glazman.
   - Portions created by the Initial Developer are Copyright (C) 2002
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Original author: Daniel Glazman (daniel@glazman.org)
   -   Fabien Cazenave (kaze@kompozer.net)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet type="text/css" href="chrome://global/skin/"?>
<?xml-stylesheet type="text/css" href="chrome://editor/skin/"?>
<?xml-stylesheet type="text/css" href="chrome://editor/skin/EditorDialog.css"?>
<?xml-stylesheet type="text/css" href="chrome://cascades/content/EdCssProps.css"?>

<?xul-overlay href="chrome://global/content/globalOverlay.xul"?>
<?xul-overlay href="chrome://global/content/dialogOverlay.xul"?>
<?xul-overlay href="chrome://editor/content/EdDialogOverlay.xul"?>
<?xul-overlay href="chrome://cascades/content/tabsOverlay.xul"?>

<!DOCTYPE dialog [
<!ENTITY % cascadesDTD SYSTEM "chrome://cascades/locale/EdCssProps.dtd">
  %cascadesDTD;
<!ENTITY % editorOverlayDTD SYSTEM "chrome://editor/locale/editorOverlay.dtd">
  %editorOverlayDTD;
]>
<dialog title="&Window.title;"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:html="http://www.w3.org/1999/xhtml"
    onload="kzsStartup();"
    ondialogaccept="FlushChanges();"
    ondialogcancel="CancelAllChanges();">

  <!-- Methods common to all editor dialogs -->
  <script type="application/x-javascript" src="chrome://editor/content/editorUtilities.js" />
  <script type="application/x-javascript" src="chrome://editor/content/EdDialogCommon.js" />
  <script type="application/x-javascript" src="chrome://cascades/content/compatibility.js" />
  <script type="application/x-javascript" src="chrome://cascades/content/commonCssProps.js" />
  <script type="application/x-javascript" src="chrome://cascades/content/EdCssProps.js" />
  <script type="application/x-javascript" src="chrome://cascades/content/EdCssProps-utils.js" />
  <script type="application/x-javascript" src="chrome://global/content/dialogOverlay.js" />
  <script type="application/x-javascript" src="chrome://global/content/globalOverlay.js" />
  
  <!-- Kaze: disable useless stuff
  <keyset id="cascadeKeys">
    <key keycode="VK_RETURN" oncommand="alert('return'); return false;"/>
    <key keycode="VK_ENTER" oncommand="alert('enter'); return true;"/>
    <key keycode="VK_ESCAPE" oncommand="closeWindow(true);"/>
  </keyset>
  <spacer id="location" offsetY="50" persist="offsetX offsetY"/>
  <spacer id="dummy" style="display:none"/>
   -->
  <script type="application/x-javascript">
    // Kaze: prevents to close this window with [Return]
    window.addEventListener("keypress", noReturn, true);
    function noReturn(event) {
        if (event.keyCode == KeyEvent.DOM_VK_RETURN)
        event.stopPropagation();
    }
  </script>
  <keyset id="cascadeKeys">
    <key keycode="VK_F11" oncommand="FlushChanges(); closeWindow(true);"/>
  </keyset>
  
  <stringbundle id="cascadesBundle" src="chrome://cascades/locale/cascades.properties"/>
  <broadcaster id="args" value=""/>
  
  <hbox>
    <vbox id="cssExplorer" style="width: 220px;">
      <hbox>
        <toolbarbutton id="styleMenu" type="menu-button" oncommand="CreateNewRule();"
                       tooltiptext="&ruleButton.label;">
          <menupopup>
            <menuitem id="atimportButton" label="&importRuleButton.label;" disabled="true"
                      oncommand="gNewStyleRule = 'AtimportRule';" />
            <menuitem id="atmediaButton" label="&mediaRuleButton.label;" disabled="true"
                      /> <!-- this function isn't implemented in CaScadeS either -->
            <menuitem id="linkButton" label="&linkedSheetButton.label;"
                      oncommand="gNewStyleRule = 'LinkedSheet';" />
            <menuitem id="styleButton" label="&styleSheetButton.label;"
                      oncommand="gNewStyleRule = 'StyleElement';" />
            <menuitem id="ruleButton" label="&ruleButton.label;"
                      oncommand="gNewStyleRule = 'StyleRule';"
                      style="font-weight: bold;" />
          </menupopup>
        </toolbarbutton>

        <toolbarbutton id="refreshButton"
                tooltiptext="&refreshButton.label;"
                oncommand="Refresh();"/>
        <toolbarbutton id="renameButton"
                tooltiptext="&renameButton.label;"
                oncommand="ChangeSelector();"/>
        <toolbarbutton id="removeButton"
                tooltiptext="&removeButton.label;"
                disabled="true"
                oncommand="RemoveObject();"/>
        <spacer flex="1"/>
        <toolbarbutton id="upButton"
                class="up"
                disabled="true"
                tooltiptext="&upButton.label;"
                oncommand="MoveObjectUp()"/>
        <toolbarbutton id="downButton"
                class="down"
                disabled="true"
                tooltiptext="&downButton.label;"
                oncommand="MoveObjectDown()"/>
      </hbox>
      <tree id="sheetsTree"
            flex="1"
            seltype="single"
            hidecolumnpicker="true"
            ondblclick="onDoubleClickCSSTreeItem();"
            onselect="onSelectCSSTreeItem(null);">
        <treecols>
          <treecol primary="true"
                   id="sheetsTreeCol"
                   flex="1"
                   label="&sheetsTreeColumn.label;"/>
        </treecols>
        <treechildren flex="1" id="stylesheetsTree"/>
      </tree>
      <checkbox label="&expertModeChecbox.label;" hidden="true"
                id="expertModeCheckbox"
                oncommand="toggleExpertMode();"/>
    </vbox>
    <tabbox id="sheetTabbox">
      <tabs>
        <tab id="sheetInfoTab"
             label="&sheetInfoTab.label;"
             oncommand="onSelectCSSTreeItem('general');"/>
        <tab id="textTab"
             label="&textTab.label;"
             oncommand="onSelectCSSTreeItem('text');"/>
        <tab id="backgroundTab"
             label="&backgroundTab.label;"
             oncommand="onSelectCSSTreeItem('background');"/>
        <tab id="borderTab"
             label="&borderTab.label;"
             oncommand="onSelectCSSTreeItem('border');"/>
        <tab id="boxTab"
             label="&boxTab.label;"
             oncommand="onSelectCSSTreeItem('box');"/>
        <tab id="listTab"
             label="&listTab.label;"
             oncommand="onSelectCSSTreeItem('list');"/>
        <tab id="auralTab"
             label="&auralTab.label;"
             oncommand="onSelectCSSTreeItem('aural');"/>
      </tabs>
      <!-- defined in tabsOverlay -->
      <tabpanels id="TabPanels">
        <!-- STYLESHEET INFORMATION PANEL -->
        <vbox id="sheetInfoTabPanel" flex="1">
          <label id="sheetInfoTabPanelTitle" value=""/>
          <vbox flex="1"><!-- should be a deck? -->

            <!-- Kaze: let's use some popups and editable dropdown lists -->
            <menupopup id="cssSelector-id"    onpopupshowing="findAllAttributes(this, 'id');"/>
            <menupopup id="cssSelector-class" onpopupshowing="findAllAttributes(this, 'class');"/>
            <!-- menupopup id="cssSelector-type"  onpopupshowing="findAllElements(this);"/ -->
            <menupopup id="cssSelector-type"  onpopupshowing="filterAllElements(this);"
                       oncommand="this.parentNode.value = this.parentNode.value.replace(/\s.*/, '');">
              <menuitem label="body (&bodyTextCmd.label;)"            value="body"/>
              <menuitem label="p (&paragraphParagraphCmd.label;)"     value="p"/>
              <menuitem label="h1 (&heading1Cmd.label;)"              value="h1"/>
              <menuitem label="h2 (&heading2Cmd.label;)"              value="h2"/>
              <menuitem label="h3 (&heading3Cmd.label;)"              value="h3"/>
              <menuitem label="h4 (&heading4Cmd.label;)"              value="h4"/>
              <menuitem label="h5 (&heading5Cmd.label;)"              value="h5"/>
              <menuitem label="h6 (&heading6Cmd.label;)"              value="h6"/>
              <menuitem label="address (&paragraphAddressCmd.label;)" value="address"/>
              <menuitem label="pre (&paragraphPreformatCmd.label;)"   value="pre"/>
            </menupopup>
            <menupopup id="cssSelector-custom">
              <menuitem label="body, p, li"/>
              <menuitem label="a:active"/>
              <menuitem label="a:hover"/>
              <menuitem label="a:link"/>
              <menuitem label="a:visited"/>
              <menuitem label="a img"/>
            </menupopup>
            <menupopup id="cssMediaList">
              <menuitem label="all"/>
              <menuitem label="aural"/>
              <menuitem label="braille"/>
              <menuitem label="embossed"/>
              <menuitem label="handheld"/>
              <menuitem label="print"/>
              <menuitem label="projection"/>
              <menuitem label="screen"/>
              <menuitem label="tty"/>
              <menuitem label="tv"/>
            </menupopup>
            <!-- /Kaze -->

            <grid id="sheetInfoTabGrid">
              <columns><column/><column flex="1"/></columns>
            </grid>
            <textbox id="cssTBox" multiline="true" hidden="true" flex="1"
              oninput="UpdateCSS()" onblur="UpdateCSS()"/>
          </vbox>
        </vbox>
        <vbox id="textTabPanel" />
        <vbox id="backgroundTabPanel" />
        <vbox id="borderTabPanel" />
        <vbox id="boxTabPanel" />
        <vbox id="listTabPanel" />
        <vbox id="auralTabPanel" />
      </tabpanels>
    </tabbox>
  </hbox>
</dialog>
