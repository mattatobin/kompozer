<?xml version="1.0" encoding="UTF-8"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Mozilla.org code.
   -
   - The Initial Developer of the Original Code is
   - H책kan Waara. Portions created by H책kan Waara are Copyright (C), H책kan Waara.  All Rights Reserved.
   - Portions created by the Initial Developer are Copyright (C) 2001
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   H책kan Waara (Original Author)
   -   Daniel Glazman (daniel@glazman.org)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either of the GNU General Public License Version 2 or later (the "GPL"),
   - or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings id="spinbuttonsBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="spinbuttons"
           extends="chrome://global/content/bindings/spinbuttons.xml#spinbuttons-baseline">
    <resources>
      <stylesheet src="chrome://global/skin/spinbuttons.css"/>
    </resources>
  </binding>

  <binding id="spinbuttons-baseline">
    <content>
      <xul:vbox flex="1" align="center">
        <xul:image xbl:inherits="timeout" class="up"/>
        <xul:image xbl:inherits="timeout" class="down"/>
      </xul:vbox>
    </content>
    <implementation>
      <method name="up">
        <body>
          <![CDATA[
            var action = this.getAttribute("onup");
            eval(action);
          ]]>
        </body>
      </method>
      <method name="down">
        <body>
          <![CDATA[
            var action = this.getAttribute("ondown");
            eval(action);
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="spinbuttons-button">
    <implementation>
      <field name="mTimer">null</field>
      <field name="mRepeated">false</field>
      <field name="mTimeoutDuration">null</field>

      <constructor>
        <![CDATA[
          this.mTimeoutDuration = this.getAttribute("timeout");
        ]]>
      </constructor>

    </implementation>
    <handlers>
      <handler event="click">
        <![CDATA[
          if (!this.mRepeated)
            this.doAction(this, false);
        ]]>
      </handler>
      <handler event="mousedown">
        <![CDATA[
          if (this.mTimeoutDuration)
          {
            this.mRepeated = false;
            if (this.mTimer)
              return;
            this.mTimer = window.setTimeout(this.doAction, this.mTimeoutDuration, this, true);
          }
        ]]>
      </handler>
      <handler event="mouseup">
        <![CDATA[
          if (this.mTimeoutDuration)
          {
            if (this.mTimer)
              window.clearTimeout(this.mTimer);
            this.mTimer = null;
          }
        ]]>
      </handler>
      <handler event="mouseout">
        <![CDATA[
          if (this.mTimeoutDuration)
          {
            if (this.mTimer)
              window.clearTimeout(this.mTimer);
            this.mTimer = null;
          }
        ]]>
      </handler>
    </handlers>
  </binding>

  <binding id="upbutton"
           extends="chrome://global/content/bindings/spinbuttons.xml#spinbuttons-button">
    <implementation>
      <method name="doAction">
        <parameter name="element"/>
        <parameter name="repeatable"/>
        <body>
          <![CDATA[
            element.parentNode.parentNode.up();

            if (repeatable)
            {
              this.mRepeated = true;
              window.clearTimeout(element.mTimer);
              element.mTimer = window.setTimeout(element.doAction, this.mTimeoutDuration, element, true);
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="downbutton"
           extends="chrome://global/content/bindings/spinbuttons.xml#spinbuttons-button">
    <implementation>
      <method name="doAction">
        <parameter name="element"/>
        <parameter name="repeatable"/>
        <body>
          <![CDATA[
            element.parentNode.parentNode.down();

            if (repeatable)
            {
              this.mRepeated = true;
              window.clearTimeout(element.mTimer);
              element.mTimer = window.setTimeout(element.doAction, this.mTimeoutDuration, element, true);
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

</bindings>
