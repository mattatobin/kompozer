<?xml version="1.0"?>

<!-- 
   - The contents of this file are subject to the Mozilla Public
   - License Version 1.1 (the "License"); you may not use this file
   - except in compliance with the License. You may obtain a copy of
   - the License at http://www.mozilla.org/MPL/
   - 
   - Software distributed under the License is distributed on an "AS
   - IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
   - implied. See the License for the specific language governing
   - rights and limitations under the License.
   - 
   - The Original Code is Mozilla.org code.
   - 
   - The Initial Developer of the Original Code is Håkan Waara.
   - Portions created by Håkan Waara are Copyright (C),
   - Håkan Waara.  All Rights Reserved.
   - 
   - Contributor(s): Håkan Waara (Original Author)
   -   Daniel Glazman (daniel@glazman.org)
  -->

<bindings id="spinbuttonsBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="spinbuttons"
           extends="chrome://global/content/bindings/spinbuttons.xml#spinbuttons-baseline">
    <resources>
      <stylesheet src="chrome://global/skin/spinbuttons.css"/>
    </resources>
  </binding>

  <binding id="spinbuttons-baseline">
    <content>
      <xul:vbox flex="1" align="center">
        <xul:image xbl:inherits="timeout" class="up"/>
        <xul:image xbl:inherits="timeout" class="down"/>
      </xul:vbox>
    </content>
    <implementation>
      <method name="up">
        <body>
          <![CDATA[
            var action = this.getAttribute("onup");
            eval(action);
          ]]>
        </body>
      </method>
      <method name="down">
        <body>
          <![CDATA[
            var action = this.getAttribute("ondown");
            eval(action);
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="spinbuttons-button">
    <implementation>
      <field name="mTimer">null</field>
      <field name="mRepeated">false</field>
      <field name="mTimeoutDuration">null</field>

      <constructor>
        <![CDATA[
          this.mTimeoutDuration = this.getAttribute("timeout");
        ]]>
      </constructor>

    </implementation>
    <handlers>
      <handler event="click">
        <![CDATA[
          if (!this.mRepeated)
            this.doAction(this, false);
        ]]>
      </handler>
      <handler event="mousedown">
        <![CDATA[
          if (this.mTimeoutDuration)
          {
            this.mRepeated = false;
            if (this.mTimer)
              return;
            this.mTimer = window.setTimeout(this.doAction, this.mTimeoutDuration, this, true);
          }
        ]]>
      </handler>
      <handler event="mouseup">
        <![CDATA[
          if (this.mTimeoutDuration)
          {
            if (this.mTimer)
              window.clearTimeout(this.mTimer);
            this.mTimer = null;
          }
        ]]>
      </handler>
      <handler event="mouseout">
        <![CDATA[
          if (this.mTimeoutDuration)
          {
            if (this.mTimer)
              window.clearTimeout(this.mTimer);
            this.mTimer = null;
          }
        ]]>
      </handler>
    </handlers>
  </binding>

  <binding id="upbutton"
           extends="chrome://global/content/bindings/spinbuttons.xml#spinbuttons-button">
    <implementation>
      <method name="doAction">
        <parameter name="element"/>
        <parameter name="repeatable"/>
        <body>
          <![CDATA[
            element.parentNode.parentNode.up();

            if (repeatable)
            {
              this.mRepeated = true;
              window.clearTimeout(element.mTimer);
              element.mTimer = window.setTimeout(element.doAction, this.mTimeoutDuration, element, true);
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="downbutton"
           extends="chrome://global/content/bindings/spinbuttons.xml#spinbuttons-button">
    <implementation>
      <method name="doAction">
        <parameter name="element"/>
        <parameter name="repeatable"/>
        <body>
          <![CDATA[
            element.parentNode.parentNode.down();

            if (repeatable)
            {
              this.mRepeated = true;
              window.clearTimeout(element.mTimer);
              element.mTimer = window.setTimeout(element.doAction, this.mTimeoutDuration, element, true);
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

</bindings>
